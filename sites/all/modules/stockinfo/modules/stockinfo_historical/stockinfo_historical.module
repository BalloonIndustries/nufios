<?php
/**
 * @file
 *  API for retrieving stock information from Yahoo historical stock data.
 */

/**
 * Implements hook_menu().
 */
function stockinfo_historical_menu() {
  $items = array();
  $items['admin/config/services/stockinfo/historical'] = array(
    'title' => 'Historical Stock Info settings',
    'description' => 'Pull historical data for stocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_historical_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Create the form for Stock Info historical data admin settings.
 */
function stockinfo_historical_admin_settings() {

  $form = array();

  $form['stockinfo_historical_from_date'] = array(
    '#type' => 'date',
    '#title' => t('From Date'),
    '#default_value' => variable_get("stockinfo_historical_from_date", variable_get("stockinfo_historical_from_date_default")),
  );

  $form['stockinfo_historical_symbols'] = array(
    '#type' => 'textarea',
    '#title' => t('Default symbols'),
    '#default_value' => variable_get('stockinfo_historical_symbols', variable_get('stockinfo_historical_default_symbols')),
    '#description' => t('Enter symbols to fetch quotes for, each separated by a space'),
  );

  return system_settings_form($form);
}

/**
 * Processes chunks into individual stocks for processing.
 */
function stockinfo_historical_mapstock($chunk, $symbol = NULL) {
  foreach ($chunk as $stock) {
    stockinfo_historical_process_stock($stock);
  }
}

/**
 * Implements hook_stockinfo_historical_save().
 */
function stockinfo_historical_process_stock($item) {
    $stock = $item['data'];
    $symbol = $item['symbol'];
  $date = array();

    $sid = db_query("SELECT sid FROM stockinfo_historical WHERE symbol = :symbol AND date = :date", array("symbol" => $symbol, "date" => $stock['date']))->fetchCol();
    $entity = entity_create("stockinfo_historical", array('type' => "stockinfo_historical"));
    if (isset($sid[0])) {
          $entity->is_new = 0;
    $entity->sid = $sid[0];
    }

drupal_alter('stockinfo_historical_save', $entity);
      entity_save("stockinfo_historical", $entity);
}

function stockinfo_stockinfo_historical_save_alter(&$stock) {
  foreach ($stock as &$row) {
    foreach ($row as $property => &$value)
      if ($property == "date") {
        $value = strtotime($value);
      }
  }
}

/**
 * Processes batch of historical stock data.
 */
function stockinfo_fetch_historical_data($batch) {
  $symbols = explode(" ", variable_get("stockinfo_historical_symbols", variable_get('stockinfo_default_symbols')));
  $stock_array = array();
  foreach ($symbols as $symbol) {
    $stock = stockinfo_historical_fetch($symbol);
    $stock_array[] = $stock;
  }
  $stock_chunks = array_chunk($stock_array, 200);
  foreach ($stock_chunks as $chunk) {
    $batch['operations'][] = array('stockinfo_historical_mapstock', array($chunk, $symbol));
  }
  batch_set($batch);
  batch_process("/admin/config/services/stockinfo/historical");
}

/**
 * Generates batch, passes it to relevant function.
 */
function stockinfo_historical_batch_generate() {

  $batch = array(
    'operations' => array(),
    'title' => t('Processing Historical Stock Import'),
    'finished' => 'stockinfo_import_batch_finished',
    'init_message' => t('Import is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.'),
  );

  stockinfo_fetch_historical_data($batch);
}

/**
 * Implements hook_entity_info().
 */
function stockinfo_historical_entity_info() {

  $info = array();
  $info['stockinfo_historical'] = array(
    'label' => t('Stock Info Historical'),
    'plural label' => t('Stock Info Historical'),
    'base table' => 'stockinfo_historical',
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'symbol',
    ),
    'module' => 'stockinfo_historical',
    'views controller class' => 'EntityDefaultViewsController',
    'controller class' => 'EntityAPIController',
    'access callback' => 'stock_info_access_callback',
    'fieldable' => TRUE,
  );

  return $info;
}

/**
 * Implement hook_rules_action_info().
 */
function stockinfo_historical_rules_action_info() {
  return array(
    'stockinfo_historical_rules_action_pull_historical_stock_data' => array(
      'label' => t('Pull Historical Stock Data'),
      'group' => t('Stockinfo'),
    ),
  );
}

/**
 *  This callback fetches the historical stock data.
 */
function stockinfo_historical_rules_action_pull_historical_stock_data() {
  stockinfo_historical_batch_generate();
}

/**
 * Implementation of hook_cron_queue_info().
 */
function stockinfo_historical_cron_queue_info() {
  $queues['stockinfo'] = array(
    'worker callback' => 'stockinfo_historical_run', // This is the callback function for each queue item.
  );
  return $queues;
}

/**
 * Queues historical stockinfo items.
 */
function stockinfo_historical_queue_it() {
  $symbols = explode(" ", variable_get("stockinfo_historical_symbols", variable_get('stockinfo_historical_default_symbols')));
  foreach($symbols as $symbol) {
  $stock = stockinfo_historical_fetch($symbol);
  }
  if ($stock == FALSE) {
    watchdog("Stockinfo", "Error, symbol does not have data");
    return;
  }
  $queue = DrupalQueue::get('stockinfo_historical');
    $queue->createItem($stock);
}

/**
 * Implementation of hook_cron().
 */
function stockinfo_historical_cron() {
  stockinfo_historical_queue_it();
}

/**
 * Worker Callback for the historical stockinfo cron queue.
 */
function stockinfo_historical_run($item) {
  stockinfo_historical_process_stock($item);
}

/**
 * Saves stockinfo entity.
 */
function stockinfo_historical_save($stockinfo) {
  if ($stockinfo->is_new) {
    $sid = db_insert('stockinfo_historical')
        ->useDefaults(array('sid'))
        ->fields(array(
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'date' => isset($stockinfo->date) ? $stockinfo->date : NULL,
        ))
        ->execute();

    $stockinfo->sid = $sid;
    $stockinfo->revision = TRUE;
  }
  if (!empty($stockinfo->revision)) {
    $vid = db_insert('stockinfo_revision')
        ->useDefaults(array('vid'))
        ->fields(array(
          'sid' => $stockinfo->sid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'changed' => REQUEST_TIME,
        ))
        ->execute();

    $stockinfo->vid = $vid;

    db_update('stockinfo')
        ->condition('sid', $stockinfo->sid)
        ->fields(array(
          'vid' => $stockinfo->vid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
        ))
        ->execute();
  }

  // let Field UI deal with the fields.
  if ($stockinfo->is_new) {
    field_attach_insert('stockinfo', $stockinfo);
  }
  else {
    field_attach_update('stockinfo', $stockinfo);
  }

  return $stockinfo->sid;
}

/*
 * Historical stock fetch - grabs historical data for stocks
 */
function stockinfo_historical_fetch($symbol) {
    watchdog("symbol", "<pre>" . print_r($symbol, true) . "</pre>");
  $date = variable_get("stockinfo_historical_from_date", variable_get("stockinfo_historical_from_date_default"));
  watchdog("date", "<pre>" . print_r($date, true) . "</pre>");
  $date['month'] = $date['month'] - 1;
  $url = "http://ichart.yahoo.com/table.csv?s=" . $symbol . "&a=" . $date['month'] . "&b=" . $date['day'] . "&c=" . $date['year'] . "&d=" . date("m") . "&e=" . date("d") . "&f=" . date("Y") . "&g=w&ignore=.csv";
  $results = drupal_http_request($url);
  $result['data'] = $results->data;
  $result['symbol'] = $symbol;
  watchdog("result", "<pre>" . print_r($results, true) . "</pre>");
  if (_stockinfo_historical_request_failure($results))
    return FALSE;

  // Symbols are returned in CSV format.
  return _stockinfo_historical_parse_csv($result);
}

/**
 * Helper function to convert a historical feed from Yahoo! to an array.
 */
function _stockinfo_historical_parse_csv($data) {
    watchdog("data report", "<pre>" . print_r($data, true) . "</pre>");
  $csv = _stockinfo_historical_str_getcsv($data['data']);
  watchdog("csv", "<pre>" . print_r($csv, true) . "</pre>");
  foreach ($csv[0] as &$map) {
    $map = strtolower($map);
    $map = str_replace(" ", "_", $map);
    if ($map == "high" || $map == "low" || $map == "close" || $map == "adj_close") {
      $map = "stockinfo_historical_" . $map;
    }
    elseif ($map == "date") {
      
    }
    else {
      $map = "stockinfo_" . $map;
    }
  }
  foreach ($csv as $row => $value) {
    if ($row != 0) {
      $csv[$row] = array_combine($csv[0], $value);
    }
  }
  unset($csv[0]);
  watchdog("csv end", "<pre>" . print_r($csv, true) . "</pre>");
  $csv['symbol'] = $data['symbol'];
  return $csv;
}

/*
 * Helper function to convert CSV string to array for all PHP versions.
 */
function _stockinfo_historical_str_getcsv($input, $delimiter = ',', $enclosure = '"', $escape = NULL, $eol = NULL) {
  $array = array();
  $input = trim($input);
  if (function_exists('str_getcsv')) {
    $array = array_map('str_getcsv', preg_split('/\r\n?|\n/', $input));
  }
  else {
    $temp = fopen("php://memory", "rw");
    fwrite($temp, $input);
    fseek($temp, 0);
    while (($data = fgetcsv($temp, 4096, $delimiter, $enclosure)) !== FALSE) {
      $array[] = $data;
    }
    fclose($temp);
  }
  return $array;
}

/**
 * Internal helper function to deal cleanly with various HTTP response codes.
 */
function _stockinfo_historical_request_failure($results) {
  switch ($results->code) {
    case '200': // Success!
    case '304': // Not modified, nothing to do.
      return FALSE;
    default:
      watchdog('stockinfo', 'Failed to retrieve stock quotes with error: %error', array('%error' => $results->error));
      return TRUE;
  }
  return FALSE;
}