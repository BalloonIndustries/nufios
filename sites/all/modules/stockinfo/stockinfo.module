<?php

/**
 * @file
 *  API for retrieving stock information from Yahoo.
 */

/**
 * Implements hook_menu().
 */
function stockinfo_menu() {
  $items = array();

  $items['admin/config/services/stockinfo'] = array(
    'title' => 'Stock Info settings',
    'description' => 'Configure settings for Stock Info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/structure/stocks'] = array(
    'title' => 'Stock Page',
    'description' => 'Temporary Page for Stocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

/**
 * Create the form for Stock Info admin settings.
 */
function stockinfo_admin_settings() {

  $form = array();

  $form['stockinfo_restrict'] = array(
    '#type' => 'checkbox',
    '#title' => 'Restrict Hours',
    '#description' => 'Restrict the hours between which you will collect data to between Market Open and Market Close hours',
    '#default_value' => variable_get('stockinfo_restrict', 1),
  );

  $form['stockinfo_market_open'] = array(
    '#type' => 'textfield',
    '#title' => t('Market Open'),
    '#description' => t('Put the market open time - the earliest time in a day you want to start collecting data (H:i a format). Example: 9:30 am'),
    '#default_value' => variable_get('stockinfo_market_open', '9:30 am'),
  );

  $form['stockinfo_market_close'] = array(
    '#type' => 'textfield',
    '#title' => t('Market Close'),
    '#description' => t('Put the market close time - the latest time in a day you want to collect data (H:i a format). Example: 4:00 pm'),
    '#default_value' => variable_get('stockinfo_market_close', '4:00 pm'),
  );

  $form['stockinfo_symbols'] = array(
    '#type' => 'textarea',
    '#title' => t('Default symbols'),
    '#default_value' => variable_get('stockinfo_symbols', variable_get('stockinfo_default_symbols')),
    '#description' => t('Enter symbols to fetch quotes for, each separated by a space'),
  );

  return system_settings_form($form);
}

function stockinfo_mapstock($chunk) {
  foreach ($chunk as $stock) {
    stockinfo_process_stock($stock);
  }
}

/**
 * Main stock processing function.
 */
function stockinfo_process_stock($stock) {
  if (!is_array($stock)) {
    return FALSE;
  }
  $sid = db_query("SELECT sid FROM stockinfo WHERE symbol = :symbol", array("symbol" => $stock['symbol']))->fetchCol();
  $entity = entity_create("stockinfo", array('type' => "stockinfo"));
  if (isset($sid[0])) {
    unset($entity->is_new);
    $entity->sid = $sid[0];
  }

  foreach ($stock as $key => $value) {
    $key = lcfirst($key);
    $key = preg_split('/(?=[A-Z])/', $key);
    $key = implode($key, "_");
    $key = strtolower($key);
    if (in_array($key, variable_get('stockinfo_reserved_mysql'))) {
      $key = $key . "_";
    }
    if (isset($value)) {
      $entity->$key = $value;
    }
    else {
      $entity->$key = NULL;
    }
  }
  // Allow stock to be modified right before save
  drupal_alter('stockinfo_save', $entity);
  stockinfo_save($entity);
}

/**
 * Implements hook_stockinfo_save_alter().
 */
function stockinfo_stockinfo_save_alter(&$stock) {
  // Normalize the data and remove data that will break the system.
  foreach ($stock as $key => $value) {
    if (!isset($value) && $value == "stockinfo") {
      continue;
    }
    $value = strip_tags($value);
    $value = trim($value);
    if ($value == 'N/A' || $value === "- " || $value === "-" || $value === "- - -" || !isset($value) || empty($value)) {
      $value = NULL;
      continue;
    }

    if (strpos($value, "inf")) {
      $value = NULL;
    }
    // Help convert numbers from strings to numeric.
    if (strpos($value, "+") || strpos($value, "%")) {
      $value = str_replace("+", "", $value);
      $value = str_replace("%", "", $value);
    }

    if ($key == "market_capitalization" || $key == "e_b_i_t_d_a") {
      $value = stockinfo_make_numeric($value);
    }
    $value = stockinfo_convert_to_timestamp($stock, $key, $value);
    if ($value == "nan") {
      $value = NULL;
    }
    $stock->$key = $value;
  }
}

function stockinfo_import_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Import is complete');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Processes batch of current stock data.
 */
function stockinfo_fetch_data($batch) {
  $symbols = explode(" ", variable_get("stockinfo_symbols", variable_get('stockinfo_default_symbols')));
  $stocks = stockinfo_fetch($symbols);
  if ($stocks == FALSE) {
    watchdog("Stockinfo", "Error, symbols are not an array");
    return;
  }
  $stock_chunks = array_chunk($stocks, 200);
  foreach ($stock_chunks as $chunk) {
    $batch['operations'][] = array('stockinfo_mapstock', array($chunk));
  }
  batch_set($batch);
  batch_process("/admin/config/services/stockinfo");
}

/**
 * Generates batch, passes it to relevant function.
 */
function stockinfo_batch_generate($type = "stockinfo") {

  $batch = array(
    'operations' => array(),
    'title' => t('Processing Stock Import'),
    'finished' => 'stockinfo_import_batch_finished',
    'init_message' => t('Import is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.'),
  );

  stockinfo_fetch_current_data($batch);
}

/**
 * Implements hook_entity_info().
 */
function stockinfo_entity_info() {

  $info = array();

  $info['stockinfo'] = array(
    'label' => t('Stock Info'),
    'plural label' => t('Stock Info'),
    'base table' => 'stockinfo',
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'name',
    ),
    'module' => 'stockinfo',
    'views controller class' => 'EntityDefaultViewsController',
    'bundles' => array(
      'stockinfo' => array(
        'label' => t('stockinfo'),
        'admin' => array(
          'path' => 'admin/structure/stocks',
          'real path' => 'admin/structure/stocks',
          'access arguments' => array('administer site configuration'),
        ),
      ),
    ),
    'controller class' => 'EntityAPIController',
    'access callback' => 'stockinfo_access_callback',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
  );

  return $info;
}

/**
 * Implement hook_rules_action_info().
 */
function stockinfo_rules_action_info() {
  return array(
    'stockinfo_rules_action_pull_current_stock_data' => array(
      'label' => t('Pull Current Stock Data'),
      'group' => t('Stockinfo'),
    ),
    'stockinfo_rules_action_pull_historical_stock_data' => array(
      'label' => t('Pull Historical Stock Data'),
      'group' => t('Stockinfo'),
    ),
  );
}

/**
 *  This callback fetches the current stock data.
 */
function stockinfo_rules_action_pull_current_stock_data() {
  stockinfo_batch_generate();
}

/**
 * Implementation of hook_cron_queue_info().
 */
function stockinfo_cron_queue_info() {
  $queues['stockinfo'] = array(
    'worker callback' => 'stockinfo_run',
  );
  return $queues;
}

/**
 * Queues stockinfo items.
 */
function stockinfo_queue_it() {
  $symbols = explode(" ", variable_get("stockinfo_symbols", variable_get('stockinfo_default_symbols')));
  $stocks = stockinfo_fetch($symbols);
  if ($stocks == FALSE) {
    watchdog("Stockinfo", "Error, symbols are not an array");
    return;
  }
  $queue = DrupalQueue::get('stockinfo');
  foreach ($stocks as $item) {
    $queue->createItem($item);
  }
}

/**
 * Implementation of hook_cron().
 */
function stockinfo_cron() {
  $restrict_time = variable_get("stockinfo_restrict");
  if ($restrict_time == 1) {
    $current_time = date("H:i a");
    $open = variable_get("stockinfo_market_open");
    $close = variable_get("stockinfo_market_close");
    $date1 = DateTime::createFromFormat('H:i a', $current_time);
    $date2 = DateTime::createFromFormat('H:i a', $open);
    $date3 = DateTime::createFromFormat('H:i a', $close);
    if ($date1 > $date2 && $date1 < $date3) {
      stockinfo_queue_it();
    }
  }
  else {
    stockinfo_queue_it();
  }
}

/**
 * Worker Callback for the stockinfo cron queue.
 */
function stockinfo_run($item) {
  stockinfo_process_stock($item);
}

/**
 * Saves stockinfo entity.
 */
function stockinfo_save($stockinfo) {
  if (isset($stockinfo->is_new)) {
    $sid = db_insert('stockinfo')
        ->useDefaults(array('sid'))
        ->fields(array(
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
          'created' => REQUEST_TIME,
          'changed' => REQUEST_TIME,
        ))
        ->execute();

    $stockinfo->sid = $sid;
    $stockinfo->revision = TRUE;
  }
  
    $vid = db_insert('stockinfo_revision')
        ->useDefaults(array('vid'))
        ->fields(array(
          'sid' => $stockinfo->sid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
          'changed' => REQUEST_TIME,
        ))
        ->execute();

    $stockinfo->vid = $vid;
if(!isset($stockinfo->is_new)) {
    db_update('stockinfo')
        ->condition('sid', $stockinfo->sid)
        ->fields(array(
          'vid' => $stockinfo->vid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
          'changed' => REQUEST_TIME,
        ))
        ->execute();
  }

  // let Field UI deal with the fields.
  if (isset($stockinfo->is_new)) {
    field_attach_insert('stockinfo', $stockinfo);
  }
  else {
    field_attach_update('stockinfo', $stockinfo);
  }

  return $stockinfo->sid;
}

/**
 * Converts stockinfo properties from a date to timestamp.
 */
function stockinfo_convert_to_timestamp($stock, $key, $value) {
  if ($key == 'last_trade_date') {
    $timestamp = strtotime($stock->last_trade_date . " " . $stock->last_trade_time);
    if (!isset($timestamp)) {
      $timestamp = NULL;
    }
    return $timestamp;
  }
  else if ($key == 'dividend_pay_date' || $key == "ex_dividend_date" || $key == "trade_date") {
    $timestamp = strtotime($stock->$key);
    if (!isset($timestamp)) {
      $timestamp = NULL;
    }
    return $timestamp;
  }
  else {
    return $value;
  }
}

/**
 * Adds quotes to both sides of stock symbol.
 */
function stockinfo_add_quote($s) {
  return('"' . $s . '"');
}

/**
 * Converts stockinfo properties from string to number.
 */
function stockinfo_make_numeric(&$value) {
  if (strpos($value, "M")) {
    $value = str_replace("M", "", $value);
    $value = $value * 1000000;
  }
  elseif (strpos($value, "B")) {
    $value = str_replace("B", "", $value);
    $value = $value * 1000000000;
  }
  elseif (strpos($value, "K")) {
    $value = str_replace("K", "", $value);
    $value = $value * 1000;
  }
  return $value;
}

/**
 * Implement a HTTP request to Yahoo Finance to retrieve stock quotes.
 *
 * @param $symbols array
 *   An array of ticker symbols to send to Yahoo!. There is not limit on the
 *   number of symbols. Yahoo! limits 200 symbols per request, so we queue up
 *   the request into batches.
 *
 * @return
 *   An array of stocks with stock information fromm Yahoo!. False on failure.
 */
function stockinfo_fetch($symbols) {

  $l = 199;
  if (count($symbols) <= $l) {
    if (!is_array($symbols)) {
      return FALSE;
    }
    $s = array_map('urlencode', $symbols);
    $s = array_map('stockinfo_add_quote', $s);
    $s = implode(',', $s);
    $url = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20IN%20($s)&format=json&env=http://datatables.org/alltables.env";
    $nameurl = "http://download.finance.yahoo.com/d/quotes.csv?s=$s&f=sn&e=.csv";
    $name_results = drupal_http_request($nameurl);
    $name_array = _stockinfo_str_getcsv($name_results->data);
    $results = drupal_http_request($url);
    if (_stockinfo_request_failure($results))
      return FALSE;
    $data = drupal_json_decode($results->data);
    $result = $data['query']['results']['quote'];
    $result = array_map("stockinfo_add_name", $result, $name_array);
    return $result;
  }
  else {
    $batches = array_chunk($symbols, $l);
    $stocks = array();
    foreach ($batches as $key => $batch) {
      $stocks = array_merge(stockinfo_fetch($batch), $stocks);
    }
    return $stocks;
  }
}

function stockinfo_add_name($result, $name_array) {
  if ($name_array[0] == $result["symbol"]) {
    $result["Name"] = $name_array[1];
  }
  return $result;
}

/**
 * Internal helper function to deal cleanly with various HTTP response codes.
 */
function _stockinfo_request_failure($results) {
  switch ($results->code) {
    case '200': // Success!
    case '304': // Not modified, nothing to do.
      return FALSE;
    default:
      watchdog('stockinfo', 'Failed to retrieve stock quotes with error: %error', array('%error' => $results->error));
      return TRUE;
  }
  return FALSE;
}

/*
 * Helper function to convert CSV string to array for all PHP versions.
 */

function _stockinfo_str_getcsv($input, $delimiter = ',', $enclosure = '"', $escape = NULL, $eol = NULL) {
  $array = array();
  $input = trim($input);
  if (function_exists('str_getcsv')) {
    $array = array_map('str_getcsv', preg_split('/\r\n?|\n/', $input));
  }
  else {
    $temp = fopen("php://memory", "rw");
    fwrite($temp, $input);
    fseek($temp, 0);
    while (($data = fgetcsv($temp, 4096, $delimiter, $enclosure)) !== FALSE) {
      $array[] = $data;
    }
    fclose($temp);
  }
  return $array;
}

/**
 * Implements hook_entity_property_info().
 */
function stockinfo_entity_property_info() {
  $info = array();

  $info['stockinfo']['properties']['sid'] = array(
    'label' => t('SID'),
    'description' => t('The ID of the stockinfo.'),
    'type' => 'integer',
    'schema field' => 'sid',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['symbol'] = array(
    'label' => t('Symbol'),
    'description' => t('Symbol of the stockinfo.'),
    'type' => 'text',
    'schema field' => 'symbol',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['vid'] = array(
    'label' => t('Version ID'),
    'description' => t('Stockinfo VID.'),
    'type' => 'integer',
    'schema field' => 'vid',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['name'] = array(
    'label' => t('Company Name'),
    'description' => t('Name of the company.'),
    'type' => 'text',
    'schema field' => 'name',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['last_trade_with_time'] = array(
    'label' => t('Last Trade with Time'),
    'description' => t('The last trade that occurred, with time.'),
    'type' => 'text',
    'schema field' => 'last_trade_with_time',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['last_trade_price_only'] = array(
    'label' => t('Last Trade Price Only'),
    'description' => t('The last trade with only the price data.'),
    'type' => 'decimal',
    'schema field' => 'last_trade_price_only',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['last_trade_date'] = array(
    'label' => t('Last Trade Date'),
    'description' => t('The last trade date.'),
    'type' => 'date',
    'schema field' => 'last_trade_date',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['last_trade_time'] = array(
    'label' => t('Last Trade Time'),
    'description' => t('The last trade time.'),
    'type' => 'text',
    'schema field' => 'last_trade_time',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change__percent_change'] = array(
    'label' => t('Change and Percent Change'),
    'description' => t('The change and percent change.'),
    'type' => 'text',
    'schema field' => 'change__percent_change',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change_'] = array(
    'label' => t('Change'),
    'description' => t('The change in stock price.'),
    'type' => 'decimal',
    'schema field' => 'change_',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['changein_percent'] = array(
    'label' => t('Change in Percent'),
    'description' => t('The change in percent of the stock price.'),
    'type' => 'decimal',
    'schema field' => 'changein_percent',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['volume'] = array(
    'label' => t('Volume'),
    'description' => t('The number of shares.'),
    'type' => 'decimal',
    'schema field' => 'volume',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['average_daily_volume'] = array(
    'label' => t('Average Daily Volume'),
    'description' => t('The average daily volume.'),
    'type' => 'decimal',
    'schema field' => 'average_daily_volume',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['bid'] = array(
    'label' => t('Bid'),
    'description' => t('The bid price.'),
    'type' => 'decimal',
    'schema field' => 'bid',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['ask'] = array(
    'label' => t('Ask'),
    'description' => t('The ask price.'),
    'type' => 'decimal',
    'schema field' => 'ask',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['previous_close'] = array(
    'label' => t('Previous Close'),
    'description' => t('The previous day close.'),
    'type' => 'decimal',
    'schema field' => 'previous_close',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['open'] = array(
    'label' => t('Open'),
    'description' => t('The open price.'),
    'type' => 'decimal',
    'schema field' => 'open',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['days_range'] = array(
    'label' => t('Day\'s Range'),
    'description' => t('The range for the day.'),
    'type' => 'text',
    'schema field' => 'days_range',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['year_range'] = array(
    'label' => t('Year\'s Range'),
    'description' => t('The range for the year.'),
    'type' => 'text',
    'schema field' => 'year_range',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change_from_year_low'] = array(
    'label' => t('Change from Year Low'),
    'description' => t('The change from the lowest price of the year.'),
    'type' => 'decimal',
    'schema field' => 'change_from_year_low',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['percent_change_from_year_low'] = array(
    'label' => t('Percent Change from Year Low'),
    'description' => t('The percent change from the year low.'),
    'type' => 'decimal',
    'schema field' => 'percent_change_from_year_low',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change_from_year_high'] = array(
    'label' => t('Change from Year High'),
    'description' => t('The change from the highest price of the year.'),
    'type' => 'decimal',
    'schema field' => 'change_from_year_high',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['percebt_change_from_year_high'] = array(
    'label' => t('Percent Change from Year High'),
    'description' => t('The percent change from the year high.'),
    'type' => 'decimal',
    'schema field' => 'percent_change_from_year_high',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['earnings_share'] = array(
    'label' => t('Earnings/Share'),
    'description' => t('The earnings per share.'),
    'type' => 'decimal',
    'schema field' => 'earnings_share',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['p_e_ratio'] = array(
    'label' => t('Price/Earings Ratio'),
    'description' => t('The price to earnings ratio.'),
    'type' => 'decimal',
    'schema field' => 'p_e_ratio',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['short_ratio'] = array(
    'label' => t('Short Ratio'),
    'description' => t('The short ratio.'),
    'type' => 'decimal',
    'schema field' => 'short_ratio',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['dividend_pay_date'] = array(
    'label' => t('Dividend Pay Date'),
    'description' => t('The date that dividends will be paid.'),
    'type' => 'date',
    'schema field' => 'dividend_pay_date',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['ex_dividend_date'] = array(
    'label' => t('Ex-Dividend Date'),
    'description' => t('The ex-dividend date.'),
    'type' => 'date',
    'schema field' => 'ex_dividend_date',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['dividend_yield'] = array(
    'label' => t('Dividend Yield'),
    'description' => t('The yield from the dividends.'),
    'type' => 'decimal',
    'schema field' => 'dividend_yield',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['market_capitalization'] = array(
    'label' => t('Market Cap'),
    'description' => t('The market capitalization of the company.'),
    'type' => 'decimal',
    'schema field' => 'market_capitalization',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['oneyr_target_price'] = array(
    'label' => t('One Year Target Price'),
    'description' => t('The target price for the stock.'),
    'type' => 'decimal',
    'schema field' => 'oneyr_target_price',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['e_p_s_estimate_current_year'] = array(
    'label' => t('EPS Estimate Current Year'),
    'description' => t('The EPS estimate for the current year.'),
    'type' => 'decimal',
    'schema field' => 'e_p_s_estimate_current_year',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['e_p_s_estimate_next_year'] = array(
    'label' => t('EPS Estimate Next Year'),
    'description' => t('The EPS estimate for the next year.'),
    'type' => 'decimal',
    'schema field' => 'e_p_s_estimate_next_year',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['e_p_s_estimate_next_quarter'] = array(
    'label' => t('EPS Estimate Next Quarter'),
    'description' => t('The EPS estimate for the next quarter.'),
    'type' => 'decimal',
    'schema field' => 'e_p_s_estimate_next_quarter',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['price_e_p_s_estimate_current_year'] = array(
    'label' => t('Price/EPS Estimate Current Year'),
    'description' => t('The Price/EPS estimate for the current year.'),
    'type' => 'decimal',
    'schema field' => 'price_e_p_s_estimate_current_year',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['price_e_p_s_estimate_next_year'] = array(
    'label' => t('Price/EPS Estimate Next Year'),
    'description' => t('The Price/EPS estimate for the next year.'),
    'type' => 'decimal',
    'schema field' => 'price_e_p_s_estimate_next_year',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['p_e_g_ratio'] = array(
    'label' => t('PEG Ratio'),
    'description' => t('The PEG ratio.'),
    'type' => 'decimal',
    'schema field' => 'p_e_g_ratio',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['book_value'] = array(
    'label' => t('Book Value'),
    'description' => t('The book value.'),
    'type' => 'decimal',
    'schema field' => 'book_value',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['price_book'] = array(
    'label' => t('Price/Book'),
    'description' => t('The price to book ratio.'),
    'type' => 'decimal',
    'schema field' => 'price_book',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['price_sales'] = array(
    'label' => t('Price/Sales'),
    'description' => t('The price to sales ratio.'),
    'type' => 'decimal',
    'schema field' => 'price_sales',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['e_b_i_t_d_a'] = array(
    'label' => t('EBITDA'),
    'description' => t('The EBITDA.'),
    'type' => 'text',
    'schema field' => 'e_b_i_t_d_a',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['fiftyday_moving_average'] = array(
    'label' => t('50-day Moving Average'),
    'description' => t('The 50-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'fiftyday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change_from_fiftyday_moving_average'] = array(
    'label' => t('Change from 50-day Moving Average'),
    'description' => t('The change from 50-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'change_from_fiftyday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['percent_change_from_fiftyday_moving_average'] = array(
    'label' => t('Percent Change from 50-Day Moving Average'),
    'description' => t('The percent change from the 50-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'percent_change_from_fiftyday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['two_hundredday_moving_average'] = array(
    'label' => t('200-Day Moving Average'),
    'description' => t('The 200-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'two_hundredday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['change_from_two_hundredday_moving_average'] = array(
    'label' => t('Change from 200-Day Moving Average'),
    'description' => t('The change from 200-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'change_from_two_hundredday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['percent_change_from_two_hundredday_moving_average'] = array(
    'label' => t('Percent Change from 200-Day Moving Average'),
    'description' => t('The percent change from 200-day moving average.'),
    'type' => 'decimal',
    'schema field' => 'percent_change_from_two_hundredday_moving_average',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['days_value_change'] = array(
    'label' => t('Day\'s Value Change'),
    'description' => t('The day\'s value change.'),
    'type' => 'decimal',
    'schema field' => 'days_value_change',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['stock_exchange'] = array(
    'label' => t('Stock Exchange'),
    'description' => t('The stock exchange a stock belongs to.'),
    'type' => 'text',
    'schema field' => 'stock_exchange',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['created'] = array(
    'label' => t('Created'),
    'description' => t('The created date.'),
    'type' => 'date',
    'schema field' => 'created',
    'entity views field' => TRUE,
  );
  $info['stockinfo']['properties']['changed'] = array(
    'label' => t('Changed'),
    'description' => t('The last changed date.'),
    'type' => 'date',
    'schema field' => 'changed',
    'entity views field' => TRUE,
  );
  return $info;
}
