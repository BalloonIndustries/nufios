<?php

/**
 * @file
 *  API for retrieving stock information from Yahoo!
 */
module_load_include('inc', 'stockinfo');

/**
 * Implements hook_menu().
 */
function stockinfo_menu() {
  $items = array();

  $items['admin/config/services/stockinfo'] = array(
    'title' => 'Stock Info settings',
    'description' => 'Configure settings for Stock Info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/stockinfo/properties'] = array(
    'title' => 'Stock Info Properties',
    'description' => 'Configure properties for Stock Info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_property_page'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/stockinfo/historical'] = array(
    'title' => 'Historical Stock Info settings',
    'description' => 'Pull historical data for stocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockinfo_historical_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/structure/stocks'] = array(
    'title' => 'Stock',
    'description' => 'Stock data from the Stockinfo module',
    'page callback' => array('stockinfo_display_page'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/stockinfo/fake-page'] = array(
    'title' => 'FAKE PAGE',
    'description' => 'Do any function I want!!!',
    'page callback' => 'stockinfo_fetch_data',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function stockinfo_display_page() {
  $output = '';
  return $output;
}

/**
 * Create the form for Stock Info historical data admin settings.
 */
function stockinfo_historical_admin_settings() {

  $form = array();

  $form['stockinfo_historical_from_date'] = array(
    '#type' => 'date',
    '#title' => t('From Date'),
    '#default_value' => variable_get("stockinfo_historical_from_date", variable_get("stockinfo_historical_from_date_default")),
  );

  $form['stockinfo_historical_symbols'] = array(
    '#type' => 'textarea',
    '#title' => t('Default symbols'),
    '#default_value' => variable_get('stockinfo_historical_symbols', variable_get('stockinfo_default_symbols')),
    '#description' => t('Enter symbols to fetch quotes for, each separated by a space'),
  );

  return system_settings_form($form);
}

/**
 * Create the form for Stock Info admin settings.
 */
function stockinfo_admin_settings() {

  $form = array();

  $form['stockinfo_restrict'] = array(
    '#type' => 'checkbox',
    '#title' => 'Restrict Hours',
    '#description' => 'Restrict the hours between which you will collect data to between Market Open and Market Close hours',
    '#default_value' => variable_get('stockinfo_restrict', 1),
  );

  $form['stockinfo_market_open'] = array(
    '#type' => 'textfield',
    '#title' => t('Market Open'),
    '#description' => t('Put the market open time - the earliest time in a day you want to start collecting data (H:i a format). Example: 9:30 am'),
    '#default_value' => variable_get('stockinfo_market_open', '9:30 am'),
  );

  $form['stockinfo_market_close'] = array(
    '#type' => 'textfield',
    '#title' => t('Market Close'),
    '#description' => t('Put the market close time - the latest time in a day you want to collect data (H:i a format). Example: 4:00 pm'),
    '#default_value' => variable_get('stockinfo_market_close', '4:00 pm'),
  );

  $form['stockinfo_symbols'] = array(
    '#type' => 'textarea',
    '#title' => t('Default symbols'),
    '#default_value' => variable_get('stockinfo_symbols', variable_get('stockinfo_default_symbols')),
    '#description' => t('Enter symbols to fetch quotes for, each separated by a space'),
  );

  return system_settings_form($form);
}

function stockinfo_mapstock($chunk) {
  foreach ($chunk as $stock) {
    stockinfo_process_stock($stock);
  }
}

function stockinfo_process_stock($stock) {
  if (!is_array($stock)) {
    return FALSE;
  }
  watchdog("stock", "<pre>" . print_r($stock, true) . "</pre>");
  $sid = db_query("SELECT sid FROM stockinfo WHERE symbol = :symbol", array("symbol" => $stock['symbol']))->fetchCol();
  $entity = entity_create("stockinfo", array('type' => "stockinfo"));
  if (isset($sid[0])) {
    unset($entity->is_new);
    $entity->sid = $sid[0];
  }

  foreach ($stock as $key => $value) {
    $key = lcfirst($key);
    $key = preg_split('/(?=[A-Z])/', $key);
    $key = implode($key, "_");
    $key = strtolower($key);
    if (in_array($key, variable_get('stockinfo_reserved_mysql'))) {
      $key = $key . "_";
    }
    if (isset($value)) {
      $entity->$key = $value;
    }
    else {
      $entity->$key = NULL;
    }
  }
  watchdog("stockinfo object before save", "<pre>" . print_r($entity, true) . "</pre>");
  // Allow stock to be modified right before save
  drupal_alter('stockinfo_save', $entity);
  watchdog("entity after save", "<pre>" . print_r($entity, true) . "</pre>");
  stockinfo_save($entity);
}

function stockinfo_historical_mapstock($chunk, $symbol = NULL) {
  foreach ($chunk as $stock) {
    stockinfo_historical_process_stock($stock);
  }
}

function stockinfo_historical_process_stock($stock) {
  drupal_alter('stockinfo_historical_save', $stock);
  $date = array();
  foreach ($stock as $previous_stock) {

    $sid = db_query("SELECT sid FROM stockinfo_historical WHERE symbol = :symbol AND date = :date", array("symbol" => $symbol, "date" => $previous_stock['date']))->fetchCol();
    if (isset($sid[0])) {
      
    }
    else {
      $entity = entity_create($type, array('type' => $type));
      foreach ($previous_stock as $key => $value) {
        if ($key == "date") {
          $entity->$key = $value;
          $entity->symbol = $symbol;
        }
        else {
          $entity->{$key} = $value;
        }
      }
      entity_save("stockinfo_historical", $entity);
    }
  }
}

function stockinfo_stockinfo_historical_save_alter(&$stock) {
  foreach ($stock as &$row) {
    foreach ($row as $property => &$value)
      if ($property == "date") {
        $value = strtotime($value);
      }
  }
}

function stockinfo_stockinfo_save_alter(&$stock) {
  watchdog("stock", "<pre>" . print_r($stock, true) . "</pre>");
  foreach ($stock as $key => $value) {
    if(!isset($value)) {
      continue;
    }
    $value = strip_tags($value);
    $value = trim($value);
    if ($value == 'N/A' || $value === "- " || $value === "-" || $value === "- - -" || !isset($value) || empty($value)) {
      $value = NULL;
      continue;
    }
    // Help convert numbers from strings to numeric.
    if (strpos($value, "+") || strpos($value, "%")) {
      $value = str_replace("+", "", $value);
      $value = str_replace("%", "", $value);
    }

    if ($key == "market_capitalization" || $key == "e_b_i_t_d_a") {
      $value = stockinfo_make_numeric($value);
    }
    $value = stockinfo_convert_to_timestamp($stock, $key, $value);
    $stock->$key = $value;
  }
}

function stockinfo_import_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Import is complete');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Processes batch of current stock data.
 */
function stockinfo_fetch_data($batch) {
  $symbols = explode(" ", variable_get("stockinfo_symbols", variable_get('stockinfo_default_symbols')));
  $stocks = stockinfo_fetch($symbols);
  if ($stocks == FALSE) {
    watchdog("Stockinfo", "Error, symbols are not an array");
    return;
  }
  $stock_chunks = array_chunk($stocks, 200);
  foreach ($stock_chunks as $chunk) {
    $batch['operations'][] = array('stockinfo_mapstock', array($chunk));
  }
  batch_set($batch);
  batch_process("/admin/config/services/stockinfo");
}

/**
 * Processes batch of historical stock data.
 */
function stockinfo_fetch_historical_data($batch) {
  $symbols = explode(" ", variable_get("stockinfo_historical_symbols", variable_get('stockinfo_default_symbols')));
  $stock_array = array();
  foreach ($symbols as $symbol) {
    $stock = stockinfo_historical_fetch($symbol);
    $stock_array[] = $stock;
  }
  $stock_chunks = array_chunk($stock_array, 200);
  foreach ($stock_chunks as $chunk) {
    $batch['operations'][] = array('stockinfo_historical_mapstock', array($chunk, $symbol));
  }
  batch_set($batch);
  batch_process("/admin/config/services/stockinfo/historical");
}

/**
 * Generates batch, passes it to relevant function.
 */
function stockinfo_batch_generate($type = "stockinfo") {

  $batch = array(
    'operations' => array(),
    'title' => t('Processing Stock Import'),
    'finished' => 'stockinfo_import_batch_finished',
    'init_message' => t('Import is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.'),
  );

  if ($type == "historical") {
    stockinfo_fetch_historical_data($batch);
  }
  else {
    stockinfo_fetch_current_data($batch);
  }
}

/**
 * Implements hook_entity_info().
 */
function stockinfo_entity_info() {

  $info = array();

  $info['stockinfo'] = array(
    'label' => t('Stock Info'),
    'plural label' => t('Stock Info'),
    'base table' => 'stockinfo',
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'name',
    ),
    'module' => 'stockinfo',
    'views controller class' => 'EntityDefaultViewsController',
    'bundles' => array(
      'stockinfo' => array(
        'label' => t('stockinfo'),
        'admin' => array(
          'path' => 'admin/structure/stocks',
          'real path' => 'admin/structure/stocks',
          'access arguments' => array('administer site configuration'),
        ),
      ),
    ),
    'controller class' => 'EntityAPIController',
    'access callback' => 'stockinfo_access_callback',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
  );

  $info['stockinfo_historical'] = array(
    'label' => t('Stock Info Historical'),
    'plural label' => t('Stock Info Historical'),
    'base table' => 'stockinfo_historical',
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'symbol',
    ),
    'module' => 'stockinfo',
    'views controller class' => 'EntityDefaultViewsController',
    'controller class' => 'EntityAPIController',
    'access callback' => 'stock_info_access_callback',
    'fieldable' => TRUE,
  );

  return $info;
}

function stockinfo_access_callback() {
  return TRUE;
}

/**
 * Implement hook_rules_action_info().
 */
function stockinfo_rules_action_info() {
  return array(
    'stockinfo_rules_action_pull_current_stock_data' => array(
      'label' => t('Pull Current Stock Data'),
      'group' => t('Stockinfo'),
    ),
    'stockinfo_rules_action_pull_historical_stock_data' => array(
      'label' => t('Pull Historical Stock Data'),
      'group' => t('Stockinfo'),
    ),
  );
}

/**
 *  This callback fetches the current stock data.
 */
function stockinfo_rules_action_pull_current_stock_data() {
  stockinfo_batch_generate("stockinfo");
}

/**
 *  This callback fetches the historical stock data.
 */
function stockinfo_rules_action_pull_historical_stock_data() {
  stockinfo_batch_generate("historical");
}

/**
 * Implementation of hook_cron_queue_info().
 */
function stockinfo_cron_queue_info() {
  $queues['stockinfo'] = array(
    'worker callback' => 'stockinfo_run', // This is the callback function for each queue item.
  );
  return $queues;
}

/**
 * Queues stockinfo items.
 */
function stockinfo_queue_it() {
  $symbols = explode(" ", variable_get("stockinfo_symbols", variable_get('stockinfo_default_symbols')));
  $stocks = stockinfo_fetch($symbols);
  if ($stocks == FALSE) {
    watchdog("Stockinfo", "Error, symbols are not an array");
    return;
  }
  $queue = DrupalQueue::get('stockinfo');
  foreach ($stocks as $item) {
    $queue->createItem($item);
  }
}

/**
 * Implementation of hook_cron().
 */
function stockinfo_cron() {
  $restrict_time = variable_get("stockinfo_restrict");
  if ($restrict_time == 1) {
    $current_time = date("H:i a");
    $open = variable_get("stockinfo_market_open");
    $close = variable_get("stockinfo_market_close");
    $date1 = DateTime::createFromFormat('H:i a', $current_time);
    $date2 = DateTime::createFromFormat('H:i a', $open);
    $date3 = DateTime::createFromFormat('H:i a', $close);
    if ($date1 > $date2 && $date1 < $date3) {
      stockinfo_queue_it();
    }
  }
  else {
    stockinfo_queue_it();
  }
}

/**
 * Worker Callback for the stockinfo cron queue.
 */
function stockinfo_run($item) {
  stockinfo_process_stock($item);
}

/**
 * Saves stockinfo entity.
 */
function stockinfo_save($stockinfo) {
  watchdog("stockinfo", "<pre>" . print_r($stockinfo, true) . "</pre>");
  if ($stockinfo->is_new) {
    $sid = db_insert('stockinfo')
        ->useDefaults(array('sid'))
        ->fields(array(
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
          'created' => REQUEST_TIME,
          'changed' => REQUEST_TIME,
        ))
        ->execute();
    
    $stockinfo->sid = $sid;
    $stockinfo->revision = TRUE;
  }
  if (!empty($stockinfo->revision)) {
    $vid = db_insert('stockinfo_revision')
        ->useDefaults(array('vid'))
        ->fields(array(
          'sid' => $stockinfo->sid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
          'changed' => REQUEST_TIME,
        ))
        ->execute();
    
    $stockinfo->vid = $vid;

    db_update('stockinfo')
        ->condition('sid', $stockinfo->sid)
        ->fields(array(
          'vid' => $stockinfo->vid,
          'symbol' => $stockinfo->symbol,
          'name' => isset($stockinfo->name) ? $stockinfo->name : NULL,
          'last_trade_with_time' => isset($stockinfo->last_trade_with_time) ? $stockinfo->last_trade_with_time : NULL,
          'last_trade_price_only' => isset($stockinfo->last_trade_price_only) ? $stockinfo->last_trade_price_only : NULL,
          'last_trade_date' => isset($stockinfo->last_trade_date) ? $stockinfo->last_trade_date : NULL,
          'last_trade_time' => isset($stockinfo->last_trade_time) ? $stockinfo->last_trade_time : NULL,
          'change__percent_change' => isset($stockinfo->change__percent_change) ? $stockinfo->change__percent_change : NULL,
          'change_' => isset($stockinfo->change_) ? $stockinfo->change_ : NULL,
          'changein_percent' => isset($stockinfo->changein_percent) ? $stockinfo->changein_percent : NULL,
          'volume' => isset($stockinfo->volume) ? $stockinfo->volume : NULL,
          'average_daily_volume' => isset($stockinfo->average_daily_volume) ? $stockinfo->average_daily_volume : NULL,
          'bid' => isset($stockinfo->bid) ? $stockinfo->bid : NULL,
          'ask' => isset($stockinfo->ask) ? $stockinfo->ask : NULL,
          'previous_close' => isset($stockinfo->previous_close) ? $stockinfo->previous_close : NULL,
          'open' => isset($stockinfo->open) ? $stockinfo->open : NULL,
          'days_range' => isset($stockinfo->days_range) ? $stockinfo->days_range : NULL,
          'year_range' => isset($stockinfo->year_range) ? $stockinfo->year_range : NULL,
          'change_from_year_low' => isset($stockinfo->change_from_year_low) ? $stockinfo->change_from_year_low : NULL,
          'percent_change_from_year_low' => isset($stockinfo->percent_change_from_year_low) ? $stockinfo->percent_change_from_year_low : NULL,
          'change_from_year_high' => isset($stockinfo->change_from_year_high) ? $stockinfo->change_from_year_high : NULL,
          'percebt_change_from_year_high' => isset($stockinfo->percebt_change_from_year_high) ? $stockinfo->percebt_change_from_year_high : NULL,
          'earnings_share' => isset($stockinfo->earnings_share) ? $stockinfo->earnings_share : NULL,
          'p_e_ratio' => isset($stockinfo->p_e_ratio) ? $stockinfo->p_e_ratio : NULL,
          'short_ratio' => isset($stockinfo->short_ratio) ? $stockinfo->short_ratio : NULL,
          'dividend_pay_date' => isset($stockinfo->dividend_pay_date) ? $stockinfo->dividend_pay_date : NULL,
          'ex_dividend_date' => isset($stockinfo->ex_dividend_date) ? $stockinfo->ex_dividend_date : NULL,
          'dividend_yield' => isset($stockinfo->dividend_yield) ? $stockinfo->dividend_yield : NULL,
          'market_capitalization' => isset($stockinfo->market_capitalization) ? $stockinfo->market_capitalization : NULL,
          'oneyr_target_price' => isset($stockinfo->oneyr_target_price) ? $stockinfo->oneyr_target_price : NULL,
          'e_p_s_estimate_current_year' => isset($stockinfo->e_p_s_estimate_current_year) ? $stockinfo->e_p_s_estimate_current_year : NULL,
          'e_p_s_estimate_next_year' => isset($stockinfo->e_p_s_estimate_next_year) ? $stockinfo->e_p_s_estimate_next_year : NULL,
          'e_p_s_estimate_next_quarter' => isset($stockinfo->e_p_s_estimate_next_quarter) ? $stockinfo->e_p_s_estimate_next_quarter : NULL,
          'price_e_p_s_estimate_current_year' => isset($stockinfo->price_e_p_s_estimate_current_year) ? $stockinfo->price_e_p_s_estimate_current_year : NULL,
          'price_e_p_s_estimate_next_year' => isset($stockinfo->price_e_p_s_estimate_next_year) ? $stockinfo->price_e_p_s_estimate_next_year : NULL,
          'p_e_g_ratio' => isset($stockinfo->p_e_g_ratio) ? $stockinfo->p_e_g_ratio : NULL,
          'book_value' => isset($stockinfo->book_value) ? $stockinfo->book_value : NULL,
          'price_book' => isset($stockinfo->price_book) ? $stockinfo->price_book : NULL,
          'price_sales' => isset($stockinfo->price_sales) ? $stockinfo->price_sales : NULL,
          'e_b_i_t_d_a' => isset($stockinfo->ebitda) ? $stockinfo->ebitda : NULL,
          'fiftyday_moving_average' => isset($stockinfo->fiftyday_moving_average) ? $stockinfo->fiftyday_moving_average : NULL,
          'change_from_fiftyday_moving_average' => isset($stockinfo->change_from_fiftyday_moving_average) ? $stockinfo->change_from_fiftyday_moving_average : NULL,
          'percent_change_from_fiftyday_moving_average' => isset($stockinfo->percent_change_from_fiftyday_moving_average) ? $stockinfo->percent_change_from_fiftyday_moving_average : NULL,
          'two_hundredday_moving_average' => isset($stockinfo->two_hundredday_moving_average) ? $stockinfo->two_hundredday_moving_average : NULL,
          'change_from_two_hundredday_moving_average' => isset($stockinfo->change_from_two_hundredday_moving_average) ? $stockinfo->change_from_two_hundredday_moving_average : NULL,
          'percent_change_from_two_hundredday_moving_average' => isset($stockinfo->percent_change_from_two_hundredday_moving_average) ? $stockinfo->percent_change_from_two_hundredday_moving_average : NULL,
          'days_value_change' => isset($stockinfo->days_value_change) ? $stockinfo->days_value_change : NULL,
          'stock_exchange' => isset($stockinfo->stock_exchange) ? $stockinfo->stock_exchange : NULL,
        ))
        ->execute();
  }

  // let Field UI deal with the fields.
  if ($stockinfo->is_new) {
    field_attach_insert('stockinfo', $stockinfo);
  }
  else {
    field_attach_update('stockinfo', $stockinfo);
  }

  return $stockinfo->sid;
}
