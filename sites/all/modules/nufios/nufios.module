<?php

function computed_field_field_volume_percentage_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = 0;
  if (is_numeric($entity->volume) && is_numeric($entity->avg_daily_volume) || $entity->volume != 0 || $entity->avg_daily_volume != 0) {
    $entity_field[0]['value'] = round($entity->volume / $entity->avg_daily_volume, 10);
  }
}

function nufios_stockinfo_save(&$stock) {
  
  // replace with regular expressions soonish
  if (strpos($stock['name'], "Corporati") !== false) {
    substr_replace($stock['name'], "Corporation", " ", 9);
  }
  if (strpos($stock['name'], "Corporatio") !== false) {
    substr_replace($stock['name'], "Corporation", " ", 10);
  }
  if (strpos($stock['name'], "Acqu") !== false) {
    substr_replace($stock['name'], "Acquistion", " ", 4);
  }
  if (strpos($stock['name'], "Intersta") !== false) {
    substr_replace($stock['name'], "Interstate", " ", 7);
  }
  if (strpos($stock['name'], "Banco") !== false) {
    substr_replace($stock['name'], "", " ", 5);
  }
    if (strpos($stock['name'], "Gulf Resources, I") !== false) {
    substr_replace($stock['name'], "Gulf Resources, I", "Gulf Resources, Inc");
  }
}

/**
 * Implement hook_rules_action_info().
 */
function nufios_rules_action_info() {
  return array(
    'nufios_rules_action_pull_stock_property' => array(
      'label' => t('Pull Stock Property Value'),
      'group' => t('Nufios'),
      'parameter' => array(
        'symbol' => array(
          'type' => 'text',
          'label' => t('Symbol'),
          'description' => t('Stock symbol to collect data from.'),
        ),
      ),
      'provides' => array(
        'stock_property' => array(
          'type' => 'text',
          'label' => t('Stock Property Type'),
        ),
        'stock_property_value' => array(
          'type' => 'text',
          'label' => t('Stock Property Value'),
        ),
      ),
    ),
  );
}

function nufios_pull_stock_property_recursive($symbol, $stockinfo_keys, $count = 0) {
  $key = '';
  $while_array = array(
    "sid",
    "symbol",
    "name",
    "url",
    "updated",
    "exchange",
    "chg_and_pct_chg",
    "field_volume_percentage",
    "last_trade_date",
    "last_trade_with_time",
    "last_trade_price_only");
  do {
    $numeric_key = array_rand($stockinfo_keys, 1);
    $key = $stockinfo_keys[$numeric_key];
  } while (in_array($key, $while_array));

  // db_query was not working here, switch to db_query in the future if possible
  $property = db_select("stockinfo", "si")
          ->fields("si", array($key))
          ->condition("symbol", $symbol, "=")
          ->execute()->fetchField();
  if (empty($property)) {
    $count = $count + 1;
    if ($count > 30) {
      watchdog("Recursion Problem", "Too many instances of recursion are occuring. Please take a look.");
    }
    $property_info = nufios_pull_stock_property_recursive($symbol, $stockinfo_keys, $count);
    return $property_info;
  }
  else {
    $machine_name = variable_get('stockinfo_field_machine_name');
    $machine_key = array_search($key, $machine_name);
    $label_name = variable_get('stockinfo_field_label');
    $final_key = $label_name[$machine_key];
    $property_info = array("stock_property" => $final_key, "stock_property_value" => (string) $property);
    return $property_info;
  }
}

function nufios_rules_action_pull_stock_property($symbol) {
  $stockinfo_info = entity_get_all_property_info("stockinfo");
  $stockinfo_keys = array_keys($stockinfo_info);
  $property = nufios_pull_stock_property_recursive($symbol, $stockinfo_keys, 0);
  return $property;
}
