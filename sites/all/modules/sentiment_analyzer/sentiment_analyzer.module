<?php

/**
 * @file
 * Creates a sentiment analyzer for Twitter & Reddit
 */

/**
 * Implements hook_menu().
 */
function sentiment_analyzer_menu() {
  $items['admin/config/services/sentiment'] = array(
    'title' => 'Sentiment Authorization',
    'description' => t('Authorization page for sentiment services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sentiment_analyzer_admin'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/services/sentiment/test'] = array(
    'title' => 'Sentiment Authorization Test',
    'description' => t('Authorization page for sentiment services'),
    'page callback' => 'sentiment_analyzer_twitter_pull',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Creates an admin form for sentiment analyzer.
 */
function sentiment_analyzer_admin($form, &$form_state) {
  $form['sentiment_analyzer_twitter_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Key'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_consumer_key'),
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['sentiment_analyzer_twitter_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Secret'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_consumer_secret'),
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['sentiment_analyzer_twitter_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_words'),
    '#description' => t('Words that will be parsed for twitter. Separate categories by line return'),
  );
  $form['sentiment_analyzer_twitter_elated_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Elated Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_elated_words'),
    '#description' => t('Words in this category are checked against downloaded Tweets'),
  );
  return system_settings_form($form);
}

function sentiment_analyzer_twitter_url_format($words) {
  $url = '';
  $count = 0;
  foreach ($words as $word) {
    $count++;
    if ($count < count($words)) {
      $url .= '"' . urlencode($word) . '"%20OR%20';
    }
    else {
      $url .= '"' . urlencode($word) . '"';
    }
  }
  return $url;
}

/**
 * Pulls Twitter data for processing.
 */
function sentiment_analyzer_twitter_pull() {

  $bearer_token = sentiment_analyzer_get_token();
  watchdog("bearer token", "<pre>" . print_r($bearer_token, true) . "</pre>");
  $twitter_words = variable_get("sentiment_analyzer_twitter_words");
  $twitter_array = explode(",", $twitter_words);
  watchdog("twitter array", "<pre>" . print_r($twitter_array, true) . "</pre>");
  $chunks = array_chunk($twitter_array, 30);
  watchdog("the chunks", "<pre>" . print_r($chunks, true) . "</pre>");
  foreach ($chunks as $chunk) {
    $twitter_url = sentiment_analyzer_twitter_url_format($chunk);
    watchdog("twitter url", "<pre>" . print_r($twitter_url, true) . "</pre>");
    if (!empty($twitter_url)) {
      watchdog("json decoded twitter words", "<pre>" . print_r("<pre>" . sentiment_analyzer_search_term($bearer_token, $twitter_url, "mixed", 99, "2015-06-12") . "</pre>", true) . "</pre>");
      print "<pre>" . sentiment_analyzer_search_term($bearer_token, $twitter_url, "2015-06-12") . "</pre>";
      $result = drupal_json_decode(sentiment_analyzer_search_term($bearer_token, $twitter_url, "2015-06-12"));
      $statuses = $result['statuses'];
      foreach ($statuses as $status) {
        $elated = explode(",", variable_get("sentiment_analyzer_twitter_elated_words"));
        // Write another function here
        foreach ($elated as $e) {
          if (stripos($status['text'], $e) !== false) {
            watchdog("status text", "<pre>" . print_r(preg_replace('/[^(\x20-\x7F)]*/', '', $status['text']), true) . "</pre>");
          }
        }
      }
    }
  }
  sentiment_analyzer_invalidate_token($bearer_token);
}

/**
 * 	Get the Bearer Token, this is an implementation of steps 1&2
 * 	from https://dev.twitter.com/docs/auth/application-only-auth
 */
function sentiment_analyzer_get_token() {
  // Step 1
  // step 1.1 - url encode the consumer_key and consumer_secret in accordance with RFC 1738
  $encoded_consumer_key = urlencode(variable_get("sentiment_analyzer_twitter_consumer_key"));
  $encoded_consumer_secret = urlencode(variable_get("sentiment_analyzer_twitter_consumer_secret"));
  // step 1.2 - concatenate encoded consumer, a colon character and the encoded consumer secret
  $bearer_token = $encoded_consumer_key . ':' . $encoded_consumer_secret;
  // step 1.3 - base64-encode bearer token
  $base64_encoded_bearer_token = base64_encode($bearer_token);
  // step 2
  $url = "https://api.twitter.com/oauth2/token"; // url to send data to for authentication
  $headers = array(
    "POST /oauth2/token HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: Twitter Application-only OAuth App v.1",
    "Authorization: Basic " . $base64_encoded_bearer_token,
    "Content-Type: application/x-www-form-urlencoded;charset=UTF-8"
  );
  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_POST, 1); // send as post
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials"); // post body/fields to be sent
  $header = curl_setopt($ch, CURLOPT_HEADER, 1); // send custom headers
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $retrievedhtml = curl_exec($ch); // execute the curl
  curl_close($ch); // close the curl
  $output = explode("\n", $retrievedhtml);
  $bearer_token = '';
  foreach ($output as $line) {
    if ($line === false) {
      // there was no bearer token
    }
    else {
      $bearer_token = $line;
    }
  }
  $bearer_token = json_decode($bearer_token);
  return $bearer_token->{'access_token'};
}

/**
 * Invalidates the Bearer Token
 * Should the bearer token become compromised or need to be invalidated for any reason,
 * call this method/function.
 */
function sentiment_analyzer_invalidate_token($bearer_token) {
  $encoded_consumer_key = urlencode(variable_get("sentiment_analyzer_twitter_consumer_key"));
  $encoded_consumer_secret = urlencode(variable_get("sentiment_analyzer_twitter_consumer_secret"));
  $consumer_token = $encoded_consumer_key . ':' . $encoded_consumer_secret;
  $base64_encoded_consumer_token = base64_encode($consumer_token);
  // step 2
  $url = "https://api.twitter.com/oauth2/invalidate_token"; // url to send data to for authentication
  $headers = array(
    "POST /oauth2/invalidate_token HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: Twitter Application-only OAuth App v.1",
    "Authorization: Basic " . $base64_encoded_consumer_token,
    "Accept: */*",
    "Content-Type: application/x-www-form-urlencoded"
  );

  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_POST, 1); // send as post
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  curl_setopt($ch, CURLOPT_POSTFIELDS, "access_token=" . $bearer_token . ""); // post body/fields to be sent
  $header = curl_setopt($ch, CURLOPT_HEADER, 1); // send custom headers
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $retrievedhtml = curl_exec($ch); // execute the curl
  curl_close($ch); // close the curl
  return $retrievedhtml;
}

/**
 * Search
 * Basic Search of the Search API
 * Based on https://dev.twitter.com/docs/api/1.1/get/search/tweets
 */
function sentiment_analyzer_search_term($bearer_token, $q, $result_type = 'mixed', $count = '15', $since = NULL, $lang = 'en') {
  $url = "https://api.twitter.com/1.1/search/tweets.json"; // base url
  //$q = urlencode(trim($query)); // query term
  $formed_url = '?q=' . $q; // fully formed url
  if ($result_type != 'mixed') {
    $formed_url = $formed_url . '&result_type=' . $result_type;
  } // result type - mixed(default), recent, popular
  if ($count != '15') {
    $formed_url = $formed_url . '&count=' . $count;
  } // results per page - defaulted to 15
  if ($since != NULL) {
    $formed_url = $formed_url . "&since=" . $since;
  }
  $formed_url = $formed_url . "&lang=" . $lang;
  $formed_url = $formed_url . '&include_entities=true'; // makes sure the entities are included, note @mentions are not included see documentation
  // Maybe include an argument to allow arbitrary arguments
  watchdog("formed url", "<pre>" . print_r($formed_url, true) . "</pre>");
  $headers = array(
    "GET /1.1/search/tweets.json" . $formed_url . " HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: NufiosStock Twitter Application-only OAuth App v.1",
    "Authorization: Bearer " . $bearer_token
  );
  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url . $formed_url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  $retrievedhtml = curl_exec($ch); // execute the curl
  curl_close($ch); // close the curl
  return $retrievedhtml;
}
