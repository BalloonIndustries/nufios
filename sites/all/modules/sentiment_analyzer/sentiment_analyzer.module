<?php

/**
 * @file
 * Creates a sentiment analyzer for Twitter & Reddit
 */

/**
 * Implements hook_menu().
 */
function sentiment_analyzer_menu() {
  $items['admin/config/services/sentiment'] = array(
    'title' => 'Sentiment Analyzer Authorization',
    'description' => t('Authorization page for sentiment services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sentiment_analyzer_admin'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/services/sentiment/data'] = array(
    'title' => 'Sentiment Analyzer Data',
    'description' => t('Authorization page for sentiment services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sentiment_analyzer_data_collection'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/services/sentiment/test'] = array(
    'title' => 'Sentiment Analyzer Test',
    'description' => t('Authorization page for sentiment services'),
    'page callback' => 'sentiment_analyzer_twitter_pull',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Creates admin page for data collection.
 */
function sentiment_analyzer_data_collection() {
  $form['sentiment_analyzer_from_date'] = array(
    '#type' => 'date',
    '#title' => t('From Date'),
    '#date_year_range' => '-1:+0',
    '#default_value' => variable_get("sentiment_analyzer_from_date", strtotime('today midnight')),
  );
  $form['sentiment_analyzer_process_button'] = array(
    '#type' => 'submit',
    '#value' => t('Process Historical Data'),
    '#description' => t('Process from the date specified, collecting all the data.'),
    '#submit' => array('system_settings_form_submit', 'sentiment_analyzer_historical_data'),
  );
  $form['sentiment_analyzer_delete_button'] = array(
    '#type' => 'submit',
    '#value' => t('Delete Old Values'),
    '#description' => t('Delete all values - useful for reimporting data'),
    '#submit' => array('sentiment_analyzer_delete'),
  );
  $form['#theme'] = 'system_settings_form';
  return $form;
}

/**
 * Deletes Sentiment Analyzer Data.
 */
function sentiment_analyzer_delete() {
  db_delete("sentiment_analyzer")
      ->execute();
}

/**
 * Processes historical data.
 */
function sentiment_analyzer_historical_data() {
  $init_from = variable_get('sentiment_analyzer_from_date');
  $from_date = strtotime($init_from['year'] . '/' . $init_from['month'] . '/' . $init_from['day']);
  for ($i = $from_date; $i <= time() - 86400; $i = $i + 86400) {
    $since = date('Y-m-d', $i);
    $until = date('Y-m-d', $i + 86400);
    sentiment_analyzer_twitter_pull($since, $until);
  }
}

/**
 * Creates an admin form for sentiment analyzer.
 */
function sentiment_analyzer_admin($form, &$form_state) {
  $form['sentiment_analyzer_twitter_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Key'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_consumer_key'),
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['sentiment_analyzer_twitter_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Secret'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_consumer_secret'),
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['sentiment_analyzer_twitter_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_words'),
    '#description' => t('Words that will be parsed for twitter. Separate categories by line return'),
  );
  $form['sentiment_analyzer_twitter_elated_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Elated Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_elated_words'),
    '#description' => t('Words in the elated category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_depressed_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Depressed Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_depressed_words'),
    '#description' => t('Words in the depressed category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_composed_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Composed Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_composed_words'),
    '#description' => t('Words in the composed category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_anxious_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Anxious Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_anxious_words'),
    '#description' => t('Words in the anxious category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_agreeable_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Agreeable Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_agreeable_words'),
    '#description' => t('Words in the agreeable category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_hostile_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Hostile Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_hostile_words'),
    '#description' => t('Words in the hostile category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_energetic_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Energetic Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_energetic_words'),
    '#description' => t('Words in the energetic category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_tired_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Tired Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_tired_words'),
    '#description' => t('Words in the tired category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_clearheaded_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Clearheaded Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_clearheaded_words'),
    '#description' => t('Words in the clearheaded category are checked against downloaded Tweets'),
  );
  $form['sentiment_analyzer_twitter_confused_words'] = array(
    '#type' => 'textarea',
    '#title' => t('Twitter Confused Words'),
    '#default_value' => variable_get('sentiment_analyzer_twitter_confused_words'),
    '#description' => t('Words in the confused category are checked against downloaded Tweets'),
  );
  return system_settings_form($form);
}

function sentiment_analyzer_twitter_url_format($words) {
  $url = '';
  $count = 0;
  foreach ($words as $word) {
    $count++;
    if ($count < count($words)) {
      $url .= '"' . urlencode($word) . '"%20OR%20';
    }
    else {
      $url .= '"' . urlencode($word) . '"';
    }
  }
  return $url;
}

/**
 * Pulls Twitter data for processing.
 */
function sentiment_analyzer_twitter_pull($since = NULL, $until = NULL) {
  if ($since == NULL) {
    $since = date("Y") . "-" . date("m") . "-" . date("d");
  }
  $bearer_token = sentiment_analyzer_get_token();
  //watchdog("bearer token", "<pre>" . print_r($bearer_token, true) . "</pre>");
  $twitter_words = variable_get("sentiment_analyzer_twitter_words");
  $twitter_array = explode(",", $twitter_words);
  //watchdog("twitter array", "<pre>" . print_r($twitter_array, true) . "</pre>");
  $chunks = array_chunk($twitter_array, 30);
  //watchdog("the chunks", "<pre>" . print_r($chunks, true) . "</pre>");
  // Look into fixing chunk later on. Currently exists but unenabled.
  $words_count = array();
  foreach ($chunks as $chunk) {
    $twitter_url = sentiment_analyzer_twitter_url_format($chunk);
    //watchdog("twitter url", "<pre>" . print_r($twitter_url, true) . "</pre>");
    if (!empty($twitter_url)) {
      // Refactor so that there aren't a billion variables
      $page = 1;
      // Maybe make pages optional
      while ($page <= 15) {
        //watchdog("page", "<pre>" . print_r($page, true) . "</pre>");
        $max_id = variable_get("sentiment_analyzer_twitter_max_id", NULL);
        //watchdog("max_id iter", "<pre>" . print_r($max_id, true) . "</pre>");
        if ($max_id != 0 && isset($max_id)) {
          $max_id = number_format($max_id - 1, 0, ".", "");
        }
        //watchdog("max id string thing", "<pre>" . print_r($max_id, true) . "</pre>");
        $result = drupal_json_decode(sentiment_analyzer_search_term($bearer_token, $twitter_url, "recent", '99', $since, 'en', $max_id, $since, $until));
        //watchdog("nsearch metad data id", "<pre>" . print_r($result['search_metadata']['max_id_str'], true) . "</pre>");
        $statuses = $result['statuses'];
        foreach ($statuses as $status) {
          $words_count = sentiment_analzyer_total_count($status, $words_count);
        }
        //watchdog("status id outside", "<pre>" . print_r($status['id_str'], true) . "</pre>");
        variable_set("sentiment_analyzer_twitter_max_id", $status['id_str']);
        $page++;
        //watchdog("page", "<pre>" . print_r($page, true) . "</pre>");
      }
      variable_set("sentiment_analyzer_twitter_max_id", 0);
    }
    $mood_score = sentiment_analyzer_by_dimension($words_count);
    sentiment_analyzer_value_save($mood_score, $until);
    watchdog("mood score", "<pre>" . print_r($mood_score, true) . "</pre>");
    watchdog("words count final", "<pre>" . print_r($words_count, true) . "</pre>");
  }
  //sentiment_analyzer_invalidate_token($bearer_token);
}

function sentiment_analzyer_total_count($status, $words_count) {
  // Can we get around hard-coding this?
  $moods = sentiment_analyzer_get_moods();
  // No duplicate setting instead of just creating separate wordlist of all
  $no_dup = array();
  foreach ($moods as $mood) {
    $emotions = explode(",", variable_get("sentiment_analyzer_twitter_" . $mood . "_words"));
    //watchdog("status id", "<pre>" . print_r($status['id_str'], true) . "</pre>");
    // Write another function here
    foreach ($emotions as $emotion) {
      // Remove HTTPS, HTTP and WWW for spam
      if (!in_array($emotion, $no_dup) && stripos($status['text'], $emotion) !== false) {
        $no_dup[] = $emotion;
        $word_count = substr_count($status['text'], $emotion);
        //$words_count = $words_count + $word_count;

        if (isset($words_count[$emotion])) {
          $words_count[$emotion] = $words_count[$emotion] + $word_count;
        }
        else {
          $words_count[$emotion] = $word_count;
        }
        //watchdog("status text", "<pre>" . print_r(preg_replace('/[^(\x20-\x7F)]*/', '', $status['text']), true) . "</pre>");
        //watchdog("name", "<pre>" . print_r($emotion, true) . "</pre>");
        //watchdog("screen name", "<pre>" . print_r($status['user']['screen_name'], true) . "</pre>");
        //watchdog("words count", "<pre>" . print_r($words_count, true) . "</pre>");
      }
    }
  }
  return $words_count;
}

function sentiment_analyzer_get_moods() {
  return array(
    "elated",
    "depressed",
    "confused",
    "clearheaded",
    "anxious",
    "composed",
    "tired",
    "energetic",
    "hostile",
    "agreeable",
  );
}

/**
 * Daily score computation re Stock Prediction Using Twitter Sentiment Analysis
 */
function sentiment_analyzer_by_dimension($words_count) {
  $moods = sentiment_analyzer_get_moods();
  $total_count = array_sum($words_count);
  $mood_score = array();
  foreach ($moods as $mood) {
    $emotions = explode(",", variable_get("sentiment_analyzer_twitter_" . $mood . "_words"));
    foreach ($emotions as $emotion) {
      if (!empty($words_count[$emotion])) {
        $emotion_count = $words_count[$emotion];
        //watchdog("emotion count", "<pre>" . print_r($emotion_count, true) . "</pre>");
        //watchdog("total count", "<pre>" . print_r($total_count, true) . "</pre>");
        $score = $emotion_count / $total_count;
        //watchdog("score", "<pre>" . print_r($score, true) . "</pre>");
        if (isset($mood_score[$mood])) {
          $mood_score[$mood] = $mood_score[$mood] + $score;
        }
        else {
          $mood_score[$mood] = $score;
        }
      }
    }
  }
  return $mood_score;
}

/**
 * 	Get the Bearer Token, this is an implementation of steps 1&2
 * 	from https://dev.twitter.com/docs/auth/application-only-auth
 */
function sentiment_analyzer_get_token() {
  // Step 1
  // step 1.1 - url encode the consumer_key and consumer_secret in accordance with RFC 1738
  $encoded_consumer_key = urlencode(variable_get("sentiment_analyzer_twitter_consumer_key"));
  $encoded_consumer_secret = urlencode(variable_get("sentiment_analyzer_twitter_consumer_secret"));
  // step 1.2 - concatenate encoded consumer, a colon character and the encoded consumer secret
  $bearer_token = $encoded_consumer_key . ':' . $encoded_consumer_secret;
  // step 1.3 - base64-encode bearer token
  $base64_encoded_bearer_token = base64_encode($bearer_token);
  // step 2
  $url = "https://api.twitter.com/oauth2/token"; // url to send data to for authentication
  $headers = array(
    "POST /oauth2/token HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: Twitter Application-only OAuth App v.1",
    "Authorization: Basic " . $base64_encoded_bearer_token,
    "Content-Type: application/x-www-form-urlencoded;charset=UTF-8"
  );
  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_POST, 1); // send as post
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials"); // post body/fields to be sent
  $header = curl_setopt($ch, CURLOPT_HEADER, 1); // send custom headers
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $retrievedhtml = curl_exec($ch); // execute the curl
  //watchdog("rethtml", "<pre>" . print_r($retrievedhtml, true) . "</pre>");
  curl_close($ch); // close the curl
  $output = explode("\n", $retrievedhtml);
  $bearer_token = '';
  foreach ($output as $line) {
    if ($line === false) {
      // there was no bearer token
    }
    else {
      $bearer_token = $line;
    }
  }
  $bearer_token = json_decode($bearer_token);
  return $bearer_token->{'access_token'};
}

/**
 * Invalidates the Bearer Token
 * Should the bearer token become compromised or need to be invalidated for any reason,
 * call this method/function.
 */
function sentiment_analyzer_invalidate_token($bearer_token) {
  $encoded_consumer_key = urlencode(variable_get("sentiment_analyzer_twitter_consumer_key"));
  $encoded_consumer_secret = urlencode(variable_get("sentiment_analyzer_twitter_consumer_secret"));
  $consumer_token = $encoded_consumer_key . ':' . $encoded_consumer_secret;
  $base64_encoded_consumer_token = base64_encode($consumer_token);
  // step 2
  $url = "https://api.twitter.com/oauth2/invalidate_token"; // url to send data to for authentication
  $headers = array(
    "POST /oauth2/invalidate_token HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: Twitter Application-only OAuth App v.1",
    "Authorization: Basic " . $base64_encoded_consumer_token,
    "Accept: */*",
    "Content-Type: application/x-www-form-urlencoded"
  );

  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_POST, 1); // send as post
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  curl_setopt($ch, CURLOPT_POSTFIELDS, "access_token=" . $bearer_token . ""); // post body/fields to be sent
  $header = curl_setopt($ch, CURLOPT_HEADER, 1); // send custom headers
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $retrievedhtml = curl_exec($ch); // execute the curl
  curl_close($ch); // close the curl
  return $retrievedhtml;
}

/**
 * Search
 * Basic Search of the Search API
 * Based on https://dev.twitter.com/docs/api/1.1/get/search/tweets
 */
function sentiment_analyzer_search_term($bearer_token, $q, $result_type = 'mixed', $count = '15', $since = NULL, $lang = 'en', $max_id = NULL, $since = NULL, $until = NULL) {
  $url = "https://api.twitter.com/1.1/search/tweets.json"; // base url
  //$q = urlencode(trim($query)); // query term
  $formed_url = '?q=' . $q; // fully formed url
  if ($result_type != 'mixed') {
    $formed_url = $formed_url . '&result_type=' . $result_type;
  } // result type - mixed(default), recent, popular
  if ($count != '15') {
    $formed_url = $formed_url . '&count=' . $count;
  } // results per page - defaulted to 15
  if ($since != NULL) {
    $formed_url = $formed_url . "&since=" . $since;
  }
  if ($until != NULL) {
    $formed_url = $formed_url . "&until=" . $until;
  }
  $formed_url = $formed_url . "&lang=" . $lang;
  if (!empty($max_id)) {
    $formed_url = $formed_url . "&max_id=" . $max_id;
  }
  $formed_url = $formed_url . '&include_entities=true'; // makes sure the entities are included, note @mentions are not included see documentation
  // Maybe include an argument to allow arbitrary arguments
  watchdog("formed url", "<pre>" . print_r($formed_url, true) . "</pre>");
  $headers = array(
    "GET /1.1/search/tweets.json" . $formed_url . " HTTP/1.1",
    "Host: api.twitter.com",
    "User-Agent: NufiosStock Twitter Application-only OAuth App v.1",
    "Authorization: Bearer " . $bearer_token
  );
  $ch = curl_init();  // setup a curl
  curl_setopt($ch, CURLOPT_URL, $url . $formed_url);  // set url to send to
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // set custom headers
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // return output
  $retrievedhtml = curl_exec($ch); // execute the curl
  curl_close($ch); // close the curl
  return $retrievedhtml;
}

/**
 * Saves the relevant values into a database table.
 */
function sentiment_analyzer_value_save($mood, $date = NULL) {
  watchdog("mood before end", "<pre>" . print_r($mood, true) . "</pre>");
  if(!empty($mood)) {
  if($date == NULL) {
    $date = strtotime("today midnight");
  }
  else {
    $date = strtotime($date);
  }
  db_insert("sentiment_analyzer")
      ->fields(array(
        'type' => 'feeling', // Currently hard-coded, change later
        'elated' => $mood['elated'],
        'depressed' => $mood['depressed'],
        'confused' => $mood['confused'],
        'clearheaded' => $mood['clearheaded'],
        'anxious' => $mood['anxious'],
        'composed' => $mood['composed'],
        'tired' => $mood['tired'],
        'energetic' => $mood['energetic'],
        'hostile' => $mood['hostile'],
        'agreeable' => $mood['agreeable'],
        'date' => $date,
          )
      )->execute();
  }
}

/**
 * Implements hook_cron().
 */
function sentiment_analyzer_cron() {
  sentiment_analyzer_twitter_pull();
}
